#!/usr/bin/env python

import os, sys
import importlib
import traceback, pdb
import plasTeX
from plasTeX.Logging import getLogger
from plasTeX.Compile import run
from plasTeX.Config import config

log = getLogger()

__version__ = '2.1'

def collect_renderer_config(config):
    plastex_dir = os.path.dirname(os.path.realpath(plasTeX.__file__))
    renderers_dir = os.path.join(plastex_dir, 'Renderers')
    renderers = next(os.walk(renderers_dir))[1]
    for renderer in renderers:
        try:
            conf = importlib.import_module('plasTeX.Renderers.'+renderer+'.Config')
        except ImportError as msg:
            continue

        config += conf.config

def main(argv):
    """ Main program routine """
    print('plasTeX version %s' % __version__)

    collect_renderer_config(config)

    # Parse the command line options
    try:
        opts, args = config.getopt(argv[1:])
    except Exception as msg:
        log.error(msg)
        print(config.usage())
        sys.exit(1)

    if not args:
        print(config.usage())
        sys.exit(1)

    run(args.pop(0), config)

def info(type, value, tb):
   if hasattr(sys, 'ps1') or not sys.stderr.isatty():
      # we are in interactive mode or we don't have a tty-like
      # device, so we call the default hook
      sys.__excepthook__(type, value, tb)
   else:
      # we are NOT in interactive mode, print the exception...
      traceback.print_exception(type, value, tb)
      print()
      # ...then start the debugger in post-mortem mode.
      pdb.pm()

#sys.excepthook = info

#sys.setrecursionlimit(10000)

#main(sys.argv)
try:
    main(sys.argv)
except KeyboardInterrupt:
    pass
